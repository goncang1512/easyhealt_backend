// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  hospital      Hospital[]

  role String @default("Pacient")
  admin Admin?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Hospital {
  id          String @id
  name        String
  address     String
  numberPhone String
  email       String
  userId     String
  user      User   @relation(fields: [userId], references: [id])
  image String?
  open        String
  room        Int

  booking Booking[]
  docter Docter[]
  admin Admin[]

  @@map("hospital")
}

model Docter {
  id String @id
  name String
  specialits String
  schedule String
  photoUrl  String
  photoId String
  hospitalId  String
  booking Booking[]

  hospital Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@map("docter")
}

enum StatusBooking {
  confirm
  canceled
}

model Booking {
  id  String  @id
  name  String 
  noPhone String
  bookDate DateTime
  bookTime  String
  note  String?
  hospitalId String
  docterId  String
  status StatusBooking

  docter Docter @relation(fields: [docterId], references: [id], onDelete: Cascade)
  hospital Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@map("booking")
}

model Admin {
  id  String @id

  userId  String  @unique
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospitalId  String
  hospital  Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@map("admin")
}